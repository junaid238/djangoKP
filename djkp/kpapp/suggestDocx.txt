
class based views 
-----------------
views.py
========
def first_view(request):
    if request.method == 'GET':
        ans = ----code----
        return HttpResponse('ans')

from django.views import View

class CBV(View):
    def get(self, request):
        ans = ----code-----
        return HttpResponse('ans')


class ParentView(View):
    stmt = "<html>Welcome</hmtl>"
    def get(self, request):
        return HttpResponse(self.stmt)

class ChildView(ParentView):
    stmt = "hello world"

URLs.py
=======
from myapp.views import CBV

urlpatterns = [ 
    path('cbv/', CBV.as_view()),
]

urlpatterns = [
    path('CBV/', ParentView.as_view(stmt="hai")),
]
---------------------------------------------------------------------------
FOrms 
=====
forms.py
--------
from django import forms
model form --> direct save data to model 
class ArticleForm(forms.ModelForm):

    class Meta:
        model = Article
        fields = ('title', 'text',)

<a href="{% url 'add_new' %}" class="top-menu"><span class="glyphicon glyphicon-plus"></span></a>


url(r'^post/add_new/$', views.add_new, name='add_new'),

views.py
--------
from .forms import ArticleForm
def add_new(request):
    if request.method == "POST":
        form = ArticleForm(request.POST)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user
            post.published_date = timezone.now()
            post.save()
            return HttpResponse('Thanks for posting')
    else:
        form = ArticleForm()
    return render(request, 'blog/add_article.html', {'form': form})



add_article.html
--------------
{% extends 'blog/base.html' %}

{% block content %}
    <h1>New post</h1>
    <form method="POST" class="post-form">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" class="save btn btn-default">Save</button>
    </form>
{% endblock %}

{{ form.as_table }} will render them as table cells wrapped in <tr> tags
{{ form.as_p }} will render them wrapped in <p> tags
{{ form.as_ul }} will render them wrapped in <li> tags
